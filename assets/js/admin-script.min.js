if(document.getElementById("custom_template_input")) {
    // Get WordPress CodeMirror settings
    const editorSettings = wp.codeEditor.defaultSettings.codemirror;
    
    // Override some settings
    editorSettings.mode = 'text/html';
    editorSettings.lineNumbers = true;
    editorSettings.lineWrapping = true;
    
    // Initialize the editor
    const editor = wp.codeEditor.initialize(document.getElementById("custom_template_input"), {
        codemirror: editorSettings
    }).codemirror;
    
    // Your existing change handler
    editor.on("change", function() {
        document.getElementById("custom_template_input").value = editor.getValue();
    });
    
    // Your placeholder insertion function
    function insertPlaceholder(placeholder) {
        const cursor = editor.getCursor();
        editor.replaceRange(placeholder, cursor);
        editor.focus();
    }
}
    
    // form manage script show & hide custom template
        document.addEventListener("DOMContentLoaded", function() {
            const checkbox = document.querySelector('input[name="dapfforwc_options[use_custom_template]"]');
            
            // Function to show or hide the closest <tr> with the .custom_template_code class
            function toggleTemplateRow() {
              let closestTr = document.querySelector(".custom_template_code");
              
             if(closestTr){closestTr = closestTr.closest('tr');}
              
              // Check if the next sibling has the class 'custom_template_code'
              if (closestTr) {
                if (checkbox.checked) {
                  closestTr.style.display = ''; // Show the row
                } else {
                  closestTr.style.display = 'none'; // Hide the row
                }
              }
            }
            // Event listener for checkbox change
            if(checkbox){
            checkbox.addEventListener('change', toggleTemplateRow);}
        
            // Initialize the state on page load
            toggleTemplateRow();
          }); 
    
    // loading effect popup
    document.addEventListener('DOMContentLoaded', function() {
        const customizeLoaderLink = document.getElementById('customize_loader');
        const popup = document.getElementById('custom-loading-popup');
        const closePopup = document.querySelector('.close-popup');
        const saveEffectButton = document.getElementById('save-effect');
        let selectedEffect = null;
    
        if(customizeLoaderLink){customizeLoaderLink.addEventListener('click', function(e) {
            e.preventDefault();
            popup.style.display = 'flex';
        });}
    
        if(closePopup){closePopup.addEventListener('click', function() {
            popup.style.display = 'none';
        });}
    
        document.querySelectorAll('.loading-option').forEach(option => {
            option.addEventListener('click', function() {
                const html = this.getAttribute('data-html');
                const css = this.getAttribute('data-css');
                document.getElementById('loader_html').value = html;
                document.getElementById('loader_css').value = css;
                // Remove selected class from all options
                document.querySelectorAll('.loading-option').forEach(opt => opt.classList.remove('selected'));
                // Add selected class to the clicked option
                this.classList.add('selected');
                // Store the selected effect value
                selectedEffect = this.getAttribute('data-value');
            });
        });
    });
    
    