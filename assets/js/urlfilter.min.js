jQuery(document).ready(function ($) {
    let advancesettings, dapfforwc_options, dapfforwc_seo_permalinks_options;
    let front_page_slug;
    if (typeof dapfforwc_data !== 'undefined' && dapfforwc_data.dapfforwc_advance_settings) {
        advancesettings = dapfforwc_data.dapfforwc_advance_settings;
    }
    if (typeof dapfforwc_data !== 'undefined' && dapfforwc_data.dapfforwc_front_page_slug) {
        front_page_slug = dapfforwc_data.dapfforwc_front_page_slug;
    }
    if (typeof dapfforwc_data !== 'undefined' && dapfforwc_data.dapfforwc_options) {
        dapfforwc_options = dapfforwc_data.dapfforwc_options;
    }
    if (typeof dapfforwc_data !== 'undefined' && dapfforwc_data.dapfforwc_seo_permalinks_options) {
        dapfforwc_seo_permalinks_options = dapfforwc_data.dapfforwc_seo_permalinks_options;
    }

    var rfilterbuttonsId = $('.rfilterbuttons').attr('id');
    var path = window.location.pathname;
    var currentPage = path === "/" ? front_page_slug : path.replace(/^\/|\/$/g, '');
    // Initialize filters
    var orderby;
    let selectedValesbyuser = store_selected_values();
    // Initialize filters and handle changes
    $('#product-filter, .rfilterbuttons').on('change', handleFilterChange);
    $('#product-filter, .rfilterbuttons').on('submit', handleFilterChange);
    $('.woocommerce-ordering select').on('change', function (event) {
        // Prevent the default form submission and page reload
        event.preventDefault();

        // Get the selected value
        orderby = $(this).val();
        fetchFilteredProducts();

    });
    // Prevent form submission on pressing Enter
    $('.woocommerce-ordering').on('submit', function (event) {
        event.preventDefault();
    });

    var rfilterindex = 0;
    // Check if URL contains filters and load products accordingly
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('filters')) {
        applyFiltersFromUrl(urlParams.get('filters'));
    } else {
        // If no URL filters, check current checked items and fetch products
        if (anyFilterSelected()) {
            fetchFilteredProducts();
        }
    }

    function handleFilterChange(e) {
        e.preventDefault();

        const currentValue = $(e.target).val();
        const isChecked = $(e.target).is(':checked');

        // Select or deselect all inputs with the same value
        if (!dapfforwc_seo_permalinks_options || dapfforwc_seo_permalinks_options.use_attribute_type_in_permalinks !== "on") {
            $(`#product-filter input[value="${currentValue}"]`).prop('checked', isChecked);
            $(`.rfilterbuttons input[value="${currentValue}"]`).prop('checked', isChecked);
        }

        selectedValesbyuser = store_selected_values();
        updateUrlFilters();
        if (!anyFilterSelected()) return location.reload();
        selectedFilterShowProductTop();
        syncCheckboxSelections();
        $('#roverlay').show();
        $('#loader').show();
        fetchFilteredProducts();
    }


    function store_selected_values() {

        if (!dapfforwc_seo_permalinks_options || dapfforwc_seo_permalinks_options.use_attribute_type_in_permalinks !== "on") {
            let selectedValues = [];

            // Get selected values from checkboxes and radio buttons
            selectedValues = selectedValues.concat(
                $('#product-filter input:checked').map(function () {
                    return $(this).val();
                }).get()
            );

            // Get selected values from select elements
            $('#product-filter select').each(function () {
                const values = $(this).val();
                if (values) { // Check if a value is selected
                    selectedValues = selectedValues.concat(values);
                }
            });

            return selectedValues;
        }
        const filtersByType = {};
        $('#product-filter input:checked').each(function () {
            const value = $(this).val();
            const name = $(this).attr('name');
            if (!filtersByType[name]) {
                filtersByType[name] = [];
            }
            filtersByType[name].push(value);
        });
        return filtersByType;
        }
    function selectfromurl() {
        let urlvalues = currentPage.split('/');
        urlvalues.forEach(value => {
            // Check the input checkbox
            if ($(`input[value="${value}"]`).length) {
                $(`input[value="${value}"]`).attr('checked', true);
            } else if ($(`select option[value="${value}"]`).length) {
                // If no input found, check dropdown option
                $(`select option[value="${value}"]`).prop('selected', true);
            }
        });
    }
    // selectfromurl();
    function anyFilterSelected() {
        const inputchecked = $('#product-filter input:checked').length > 0;
        const selectSelected = $('#product-filter select').filter(function () { return this.value; }).length > 0;
        const textInputSelected = $('#product-filter input[type="text"]').filter(function () { return this.value.trim() !== ""; }).length > 0;

        return inputchecked || selectSelected || textInputSelected;
    }
    let product_selector = advancesettings ? advancesettings["product_selector"] ?? 'ul.products' : 'ul.products';
    let pagination_selector = advancesettings ? advancesettings["pagination_selector"] ?? 'ul.page-numbers' : 'ul.page-numbers';
    let productSelector_shortcode = $('#product-filter').data('product_selector');
    let paginationSelector_shortcode = $('#product-filter').data('pagination_selector');

    function fetchFilteredProducts(page = 1) {
        // selectfromurl();
        selectedValesbyuser = store_selected_values();
        console.log(selectedValesbyuser);
        const selectedValuesParam = Array.isArray(selectedValesbyuser) 
            ? selectedValesbyuser.join(',') 
            : JSON.stringify(selectedValesbyuser);
        console.log(selectedValuesParam);
        $.post(dapfforwc_ajax.ajax_url, gatherFormData() + `&selectedvalues=${selectedValuesParam}&orderby=${orderby}&paged=${page}&action=dapfforwc_filter_products`, function (response) {
            $('#roverlay').hide();
            $('#loader').hide();
            if (response.success) {
                $(productSelector_shortcode ?? product_selector).html(response.data.products);
                $('.woocommerce-result-count').text(`${response.data.total_product_fetch} results found`);
                $('#rcountproduct').text(`show(${response.data.total_product_fetch})`);
                if (dapfforwc_options["update_filter_options"] === "on") {
                    $('#product-filter div').remove();
                    $("form#product-filter").append(response.data.filter_options);
                }
                $(paginationSelector_shortcode ?? pagination_selector).html(response.data.pagination);
                syncCheckboxSelections();
            } else {
                console.error('Error:', response.message);
            }
        }).fail(handleAjaxError);
    }
    function attachPaginationEvents() {
        $(document).on('click', `${paginationSelector_shortcode ?? pagination_selector} a.page-numbers`, function (e) {
            e.preventDefault(); // Prevent the default anchor click behavior
            const url = $(this).attr('href'); // Get the URL from the link
            const page = new URL(url).searchParams.get('paged'); // Extract the page number
            $('#roverlay').show();
            $('#loader').show();
            fetchFilteredProducts(page); // Fetch products for the selected page
        });
    }

    // Call this function after updating the product listings
    if ($('#product-filter').length) {
        attachPaginationEvents();
    }
    function changePseudoElementContent(beforeContent, afterContent) {
        // Create a new style element
        var style = $('<style></style>');
        style.text(`
            .progress-percentage:before { 
                content: "${beforeContent}" !important; 
            }
            .progress-percentage:after { 
                content: "${afterContent}" !important; 
            }
        `);

        // Append the style to the head
        $('head').append(style);
    }

    function gatherFormData() {
        const currentPageSlug = path === "/" ? path : path.replace(/^\/|\/$/g, '');

        const formData = $('#product-filter').serialize();

        // price range
        const rangeInput = document.querySelectorAll(".range-input input"),
            priceInput = document.querySelectorAll(".price-input input"),
            range = document.querySelector(".slider .progress");
        let minPrice = rangeInput[0] ? parseInt(rangeInput[0].value) : 0,
            maxPrice = rangeInput[1] ? parseInt(rangeInput[1].value) : 0;
        const minPriceDefault = rangeInput[0].min ? parseInt(rangeInput[0].min) : 0;
        changePseudoElementContent(`$${minPrice}`, `$${maxPrice}`);
        rangeInput.forEach((input) => {
            input.addEventListener("input", (e) => {
                minPrice = parseInt(rangeInput[0].value) || 0; // Default to 0 if NaN
                maxPrice = parseInt(rangeInput[1].value) || 0; // Default to 0 if NaN
                changePseudoElementContent(`$${minPrice}`, `$${maxPrice}`);
                priceInput[0].value = minPrice;
                priceInput[1].value = maxPrice;
                range.style.left = ((minPrice - minPriceDefault) / (rangeInput[0].max - minPriceDefault)) * 100 + "%";
                range.style.right = 100 - (maxPrice / rangeInput[1].max) * 100 + "%";
            });
        });
        priceInput.forEach((input) => {
            input.addEventListener("input", (e) => {
                let minPrice = parseInt(priceInput[0].value),
                    maxPrice = parseInt(priceInput[1].value);
                if (e.target.className === "input-min") {
                    rangeInput[0].value = minPrice;
                    range.style.left = (minPrice / rangeInput[0].max) * 100 + "%";
                } else {
                    rangeInput[1].value = maxPrice;
                    range.style.right = 100 - (maxPrice / rangeInput[1].max) * 100 + "%";
                }

            });
        });
        //   price range ends

        // Append price filters if values exist
        let priceParams = '';
        if (minPrice) priceParams += `&min_price=${encodeURIComponent(minPrice)}`;
        if (maxPrice) priceParams += `&max_price=${encodeURIComponent(maxPrice)}`;

        return formData + priceParams + `&current-page=${encodeURIComponent(currentPageSlug)}`;
    }

    function handleAjaxError(xhr, status, error) {
        $('#roverlay').hide();
        $('#loader').hide();
        console.error('AJAX Error:', status, error);
    }

    function syncCheckboxSelections() {
        const $list = $('.rfilterbuttons ul').empty();
        $('#product-filter #' + rfilterbuttonsId + ' input').each(function () {
            const value = $(this).val();
            const checked = $(this).is(':checked');
            const type = this.type;
            $list.append(createCheckboxListItem(value, checked, type));
        });
        $('#product-filter #' + rfilterbuttonsId + ' option').each(function (index) {
            // Skip the first option (index 0)
            if (index === 0) {
                return; // Skip this iteration
            }
            const value = $(this).val();
            const checked = $(this).is(':checked');
            const type = this.type;

            $list.append(createCheckboxListItem(value, checked, type));
        });
        attachCheckboxClickEvents();
        attachMainFilterChangeEvents();
    }

    function createCheckboxListItem(value, checked, type) {
        const formattedLabel = value.split('-').map(word =>
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
        return $('<li></li>').addClass(checked ? 'checked' : '').append(
            $('<input>', {
                name: 'attribute[' + rfilterbuttonsId + '][]',
                id: 'text_' + value,
                type: 'checkbox',
                value: value,
                checked: checked
            }).on('change', syncToMainFilter),
            $('<label></label>', {
                for: 'text_' + value,
                text: formattedLabel
            })
        );
    }

    function syncToMainFilter() {
        $(`#product-filter #${rfilterbuttonsId} input[value="${$(this).val()}"]`).prop('checked', $(this).is(':checked'));
        $(`#product-filter #${rfilterbuttonsId} select option[value="${$(this).val()}"]`).prop('selected', $(this).is(':checked'));
    }

    function attachCheckboxClickEvents() {
        $('.rfilterbuttons ul').off('click', 'li').on('click', 'li', function () {
            const checkbox = $(this).find('input');
            checkbox.prop('checked', !checkbox.is(':checked')).trigger('change');
            $(this).toggleClass('checked', checkbox.is(':checked'));
        });
    }

    function attachMainFilterChangeEvents() {
        $('#' + rfilterbuttonsId + ' input').on('change', function () {
            const relatedCheckbox = $(`.rfilterbuttons ul li input[value="${$(this).val()}"]`);
            relatedCheckbox.prop('checked', $(this).is(':checked')).closest('li').toggleClass('checked', $(this).is(':checked'));
        });
    }
    function applyFiltersFromUrl(filtersString) {
        // Check if we're using the new format with attribute types in permalinks
        const urlParams = new URLSearchParams(window.location.search);
        const useNewFormat = urlParams.get('filters') === '1';

        if (!useNewFormat) {
            // Original implementation for simple filter string
            if (!filtersString) {
                const newUrl = `/${currentPage}/`;
                history.replaceState(null, '', newUrl);
                fetchFilteredProducts();
                return;
            }

            const filterValues = filtersString.split(',').map(value => value.trim());
            filterValues.forEach(value => {
                if ($(`input[value="${value}"]`).length) {
                    $(`input[value="${value}"]`).prop('checked', true);
                } else if ($(`select option[value="${value}"]`).length) {
                    $(`select option[value="${value}"]`).prop('selected', true);
                } else {
                    console.log(`Filter "${value}" not found in inputs or dropdown.`);
                }
            });

            fetchFilteredProducts();
            return;
        }

        // New implementation for attribute type permalinks
        // Process each parameter in the URL
        for (const [key, value] of urlParams.entries()) {
            if (key === 'filters') continue; // Skip the format flag

            // Split comma-separated values
            const values = value.split(',').map(v => v.trim());

            values.forEach(val => {
                // Try to find and check the corresponding input
                if ($(`input[value="${val}"]`).length) {
                    $(`input[value="${val}"]`).prop('checked', true);
                } else if ($(`select option[value="${val}"]`).length) {
                    $(`select option[value="${val}"]`).prop('selected', true);
                } else {
                    console.log(`Filter "${val}" not found in inputs or dropdown.`);
                }
            });
        }

        fetchFilteredProducts();
    }
    // reset button
    $(document).on('click', '#reset-rating', function (event) {
        event.preventDefault();
        $('input[name="rating[]"]').prop('checked', false);
        fetchFilteredProducts();
        updateUrlFilters();
    });
    // Update URL filters based on current selections
    function updateUrlFilters() {
        if (!dapfforwc_seo_permalinks_options || dapfforwc_seo_permalinks_options.use_attribute_type_in_permalinks !== "on") {
            // Use the original implementation for simple filter format
            const selectedFilters = new Set();
            $('#product-filter input:checked').each(function () {
                selectedFilters.add($(this).val());
            });
            $('#product-filter select').each(function () {
                $(this).find('option:selected').each(function () {
                    selectedFilters.add($(this).val());
                });
            });
            $('.rfilterbuttons input:checked').each(function () {
                selectedFilters.add($(this).val());
            });

            let filtersQueryString = Array.from(selectedFilters);

            if (dapfforwc_options.default_filters) {
                var defaultFilters = dapfforwc_options.default_filters[currentPage] ?? [];
                let urlvalues = currentPage.split('/');
                defaultFilters = defaultFilters.concat(urlvalues);
                if (defaultFilters) {
                    filtersQueryString = filtersQueryString.filter(function (value) {
                        return !defaultFilters.includes(value);
                    });
                }
            }

            const filterString = filtersQueryString.length !== 0 ? filtersQueryString.join(',') : '';
            const newUrl = filterString.length !== 0 ? `?filters=${filterString}` : `/${currentPage}/`;
            history.replaceState(null, '', newUrl);
            return;
        }

        // Advanced URL format with attribute types in permalinks
        const filtersByType = {};
        const prefixOptions = dapfforwc_seo_permalinks_options.dapfforwc_permalinks_prefix_options;

        // Get all filter inputs
        $('#product-filter input:checked, .rfilterbuttons input:checked').each(function () {
            const value = $(this).val();
            const name = $(this).attr('name');
            let filterType = null;

            // Determine filter type based on input name or other attributes
            if (name && name.includes('category')) {
                filterType = prefixOptions.category || 'cata';
            } else if (name && name.includes('tag')) {
                filterType = prefixOptions.tag || 'tag';
            } else if (name && name.includes('rating')) {
                filterType = prefixOptions.rating || 'rating';
            } else if (name && name.includes('price')) {
                filterType = prefixOptions.price || 'price';
            } else {
                // Try to identify attribute type based on value or other means
                for (const attrType in prefixOptions.attribute) {
                    if (prefixOptions.attribute[attrType] &&
                        (name && name.includes(attrType) || value.includes(attrType))) {
                        filterType = prefixOptions.attribute[attrType];
                        break;
                    }
                }

                // If we couldn't identify a specific attribute type, use a default
                if (!filterType) {
                    filterType = name;
                }
            }

            // Add the value to the appropriate filter type array
            if (!filtersByType[filterType]) {
                filtersByType[filterType] = [];
            }
            filtersByType[filterType].push(value);
        });

        console.log(filtersByType);

        // Handle select elements
        $('#product-filter select').each(function () {
            const selectName = $(this).attr('name');
            let filterType = null;

            // Determine filter type based on select name
            if (selectName && selectName.includes('category')) {
                filterType = prefixOptions.category || 'cata';
            } else if (selectName && selectName.includes('tag')) {
                filterType = prefixOptions.tag || 'tag';
            } else {
                // Try to identify attribute type
                for (const attrType in prefixOptions.attribute) {
                    if (prefixOptions.attribute[attrType] && selectName && selectName.includes(attrType)) {
                        filterType = prefixOptions.attribute[attrType];
                        break;
                    }
                }

                // If we couldn't identify a specific attribute type, use a default
                if (!filterType) {
                    filterType = 'attr';
                }
            }

            // Add selected values to the appropriate filter type array
            $(this).find('option:selected').each(function () {
                const value = $(this).val();
                if (value) { // Skip empty values
                    if (!filtersByType[filterType]) {
                        filtersByType[filterType] = [];
                    }
                    filtersByType[filterType].push(value);
                }
            });
        });

        // Apply default filters logic - remove default values
        if (dapfforwc_options.default_filters) {
            const defaultFilters = dapfforwc_options.default_filters[currentPage] ?? [];
            let urlvalues = currentPage.split('/');
            const allDefaultFilters = defaultFilters.concat(urlvalues);

            if (allDefaultFilters.length > 0) {
                for (const type in filtersByType) {
                    filtersByType[type] = filtersByType[type].filter(value =>
                        !allDefaultFilters.includes(value));

                    // Remove empty arrays
                    if (filtersByType[type].length === 0) {
                        delete filtersByType[type];
                    }
                }
            }
        }

        // Build the URL
        let queryParts = ['filters=1']; // Add a flag to indicate we're using the new format

        for (const type in filtersByType) {
            if (filtersByType[type].length > 0) {
                queryParts.push(`${type}=${filtersByType[type].join(',')}`);
            }
        }

        const newUrl = queryParts.length > 1
            ? `?${queryParts.join('&')}`
            : `/${currentPage}/`;

        // Update URL without reloading
        history.replaceState(null, '', newUrl);
    }
    // create list of current selected filter
    function selectedFilterShowProductTop() {
        // Clear existing content
        $('.rfilterselected ul').empty();
        if (Array.isArray(selectedValesbyuser)) {
            for (let value of selectedValesbyuser) {
            $('.rfilterselected ul').append(`
            <li class="checked">
                <input id="selected_${value}" type="checkbox" value="${value}" checked>
                <label for="selected_${value}">${value.replace(/-/g, ' ')}</label>
                <label style="font-size:12px;margin-left:5px;">x</label>
            </li>`);
            }
        } else if (typeof selectedValesbyuser === 'object' && selectedValesbyuser !== null) {
            for (let key in selectedValesbyuser) {
            for (let value of selectedValesbyuser[key]) {
                $('.rfilterselected ul').append(`
                <li class="checked">
                <input id="selected_${key}_${value}" type="checkbox" value="${value}" checked>
                <label for="selected_${key}_${value}">${value.replace(/-/g, ' ')}</label>
                <label style="font-size:12px;margin-left:5px;">x</label>
                </li>`);
            }
            }
        }
    }
    selectedFilterShowProductTop();
    syncCheckboxSelections();
    $('.rfilterselected').on('change', 'li', function (e) {
        const value = $(this).find('input[type="checkbox"]').val();
        $(`#product-filter input[value="${value}"]`).prop('checked', false);
        handleFilterChange(e);
    });


});



jQuery(document).ready(function ($) {
    function isMobile() {
        return $(window).width() <= 768;
    }
    function textChange() {
        if (isMobile()) {
            $('#product-filter .filter-group div .title').each(function () {
                $(this).text($(this).text().split(' ').pop());
            });
            $('#product-filter .items').hide();
        }
    }
    textChange();
    $(document).ajaxComplete(function () {
        textChange();
        noproductfound();
        const rangeInput = document.querySelectorAll(".range-input input"),
            priceInput = document.querySelectorAll(".price-input input"),
            range = document.querySelector(".slider .progress");
        const minPriceDefault = rangeInput[0].min ? parseInt(rangeInput[0].min) : 0;
        let minPrice = parseInt(rangeInput[0].value) || 0; // Default to 0 if NaN
        let maxPrice = parseInt(rangeInput[1].value) || 0; // Default to 0 if NaN
        range.style.left = ((minPrice - minPriceDefault) / (rangeInput[0].max - minPriceDefault)) * 100 + "%";
        range.style.right = 100 - (maxPrice / rangeInput[1].max) * 100 + "%";
    });
    // Use event delegation for dynamically added elements
    $('#product-filter').on('click', '.title', function (event) {
        if (isMobile()) {
            event.stopPropagation();
            $('#product-filter .items').hide();
            $(this).next('.items').slideToggle(); // Toggle items with a sliding effect
        }
    });
    $(document).on('click', function () {
        if (isMobile()) {
            $('.items').hide();
        }
    });
    // Show message if no products found
    noproductfound();

    function noproductfound() {
        if ($("form#product-filter").children().length === 2) {
            $(productSelector_shortcode ?? product_selector).html('<p>No products found</p>');
            $(paginationSelector_shortcode ?? pagination_selector).html('');
        }
    }
});


// cateogry hide & show manage for herichical

jQuery(document).ready(function ($) {
    $('.show-sub-cata').on('click', function (event) {
        event.preventDefault();
        const $childCategories = $(this).closest('a').next('.child-categories');
        $childCategories.slideToggle(() => {
            $(this).text($childCategories.is(':visible') ? '-' : '+');
        });
    });
});
document.addEventListener("DOMContentLoaded", function () {
    const woocommerceDivs = document.querySelectorAll("div.woocommerce.columns-4");

    woocommerceDivs.forEach((div) => {
        // Check if ul.products.columns-4 already exists
        if (!div.querySelector("ul.products.columns-4")) {
            div.insertAdjacentHTML(
                "beforeend",
                `<ul class="products columns-4"></ul>`
            );
            console.log("Added ul.products.columns-4 to div.woocommerce.columns-4");
        }
    });

    // Add woocommerce result count and ordering form if not already present
    if (woocommerceDivs.length > 0) {
        const firstDiv = woocommerceDivs[0];

        if (!firstDiv.querySelector(".woocommerce-result-count")) {
            firstDiv.insertAdjacentHTML(
                "afterbegin",
                `<p class="woocommerce-result-count">1 results found</p>`
            );
        }

        if (!firstDiv.querySelector(".woocommerce-ordering")) {
            firstDiv.insertAdjacentHTML(
                "afterbegin",
                `<form class="woocommerce-ordering" method="get">
                    <select name="orderby" class="orderby" aria-label="Shop order">
                        <option value="menu_order" selected>Default sorting</option>
                        <option value="popularity">Sort by popularity</option>
                        <option value="rating">Sort by average rating</option>
                        <option value="date">Sort by latest</option>
                        <option value="price">Sort by price: low to high</option>
                        <option value="price-desc">Sort by price: high to low</option>
                    </select>
                    <input type="hidden" name="paged" value="1">
                </form>`
            );
        }

        // Add woocommerce pagination if not already present
        if (!firstDiv.querySelector(".woocommerce-pagination")) {
            firstDiv.insertAdjacentHTML(
                "beforeend",
                `<nav class="woocommerce-pagination" aria-label="Product Pagination">
                    <ul class="page-numbers"></ul>
                </nav>`
            );
        }
    }
});
